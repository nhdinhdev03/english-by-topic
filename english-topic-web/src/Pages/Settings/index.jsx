import { useState } from 'react';
import './Settings.scss';

const Settings = () => {
  const [darkMode, setDarkMode] = useState(false);
  const [language, setLanguage] = useState('vi');
  const [voiceSettings, setVoiceSettings] = useState({
    voice: 'female-vi',
    speed: 1,
    pitch: 1,
    accent: 'northern'
  });
  const [notifications, setNotifications] = useState({
    vocabulary: true,
    dailyReminder: true,
    achievements: true
  });

  const handleVoiceChange = (key, value) => {
    setVoiceSettings(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const handleNotificationChange = (key) => {
    setNotifications(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const testVoice = () => {
    // Placeholder for voice testing
    alert('Ch·ª©c nƒÉng test gi·ªçng n√≥i s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán ·ªü ƒë√¢y');
  };

  return (
    <div className="settings-page">
      <div className="settings-container">
        <div className="settings-header">
          <h1>C√†i ƒë·∫∑t</h1>
          <p>T√πy ch·ªânh tr·∫£i nghi·ªám h·ªçc t·∫≠p c·ªßa b·∫°n</p>
        </div>

        <div className="settings-content">
          {/* Theme Settings */}
          <div className="settings-section">
            <div className="section-header">
              <h2>Giao di·ªán</h2>
              <span className="section-icon">üé®</span>
            </div>
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <h3>Ch·∫ø ƒë·ªô t·ªëi</h3>
                  <p>B·∫≠t ch·∫ø ƒë·ªô t·ªëi ƒë·ªÉ b·∫£o v·ªá m·∫Øt khi h·ªçc ban ƒë√™m</p>
                </div>
                <label className="toggle">
                  <input 
                    type="checkbox" 
                    checked={darkMode}
                    onChange={(e) => setDarkMode(e.target.checked)}
                  />
                  <span className="slider"></span>
                </label>
              </div>
            </div>
          </div>

          {/* Language Settings */}
          <div className="settings-section">
            <div className="section-header">
              <h2>Ng√¥n ng·ªØ</h2>
              <span className="section-icon">üåê</span>
            </div>
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <h3>Ng√¥n ng·ªØ giao di·ªán</h3>
                  <p>Ch·ªçn ng√¥n ng·ªØ hi·ªÉn th·ªã c·ªßa ·ª©ng d·ª•ng</p>
                </div>
                <select 
                  value={language}
                  onChange={(e) => setLanguage(e.target.value)}
                  className="select-input"
                >
                  <option value="vi">Ti·∫øng Vi·ªát</option>
                  <option value="en">English</option>
                </select>
              </div>
            </div>
          </div>

          {/* Voice Settings */}
          <div className="settings-section">
            <div className="section-header">
              <h2>Gi·ªçng n√≥i</h2>
              <span className="section-icon">üîä</span>
            </div>
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <h3>Gi·ªçng ƒë·ªçc</h3>
                  <p>Ch·ªçn gi·ªçng nam ho·∫∑c n·ªØ cho ph√°t √¢m t·ª´ v·ª±ng</p>
                </div>
                <select 
                  value={voiceSettings.voice}
                  onChange={(e) => handleVoiceChange('voice', e.target.value)}
                  className="select-input"
                >
                  <option value="female-vi">Gi·ªçng n·ªØ (Vi·ªát Nam)</option>
                  <option value="male-vi">Gi·ªçng nam (Vi·ªát Nam)</option>
                  <option value="female-en-us">Gi·ªçng n·ªØ (M·ªπ)</option>
                  <option value="male-en-us">Gi·ªçng nam (M·ªπ)</option>
                  <option value="female-en-uk">Gi·ªçng n·ªØ (Anh)</option>
                  <option value="male-en-uk">Gi·ªçng nam (Anh)</option>
                </select>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <h3>T·ªëc ƒë·ªô ƒë·ªçc</h3>
                  <p>ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô ph√°t √¢m t·ª´ v·ª±ng</p>
                </div>
                <div className="range-input-container">
                  <span className="range-label">Ch·∫≠m</span>
                  <input 
                    type="range"
                    min="0.5"
                    max="2"
                    step="0.1"
                    value={voiceSettings.speed}
                    onChange={(e) => handleVoiceChange('speed', parseFloat(e.target.value))}
                    className="range-input"
                  />
                  <span className="range-label">Nhanh</span>
                </div>
                <span className="range-value">{voiceSettings.speed}x</span>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <h3>ƒê·ªô cao gi·ªçng</h3>
                  <p>ƒêi·ªÅu ch·ªânh √¢m ƒëi·ªáu c·ªßa gi·ªçng ƒë·ªçc</p>
                </div>
                <div className="range-input-container">
                  <span className="range-label">Th·∫•p</span>
                  <input 
                    type="range"
                    min="0.5"
                    max="2"
                    step="0.1"
                    value={voiceSettings.pitch}
                    onChange={(e) => handleVoiceChange('pitch', parseFloat(e.target.value))}
                    className="range-input"
                  />
                  <span className="range-label">Cao</span>
                </div>
                <span className="range-value">{voiceSettings.pitch}</span>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <h3>Gi·ªçng ƒë·ªãa ph∆∞∆°ng</h3>
                  <p>Ch·ªçn gi·ªçng theo v√πng mi·ªÅn (cho ti·∫øng Vi·ªát)</p>
                </div>
                <select 
                  value={voiceSettings.accent}
                  onChange={(e) => handleVoiceChange('accent', e.target.value)}
                  className="select-input"
                >
                  <option value="northern">Mi·ªÅn B·∫Øc</option>
                  <option value="central">Mi·ªÅn Trung</option>
                  <option value="southern">Mi·ªÅn Nam</option>
                </select>
              </div>

              <div className="setting-item">
                <button onClick={testVoice} className="test-voice-btn">
                  üéµ Test gi·ªçng n√≥i
                </button>
              </div>
            </div>
          </div>

          {/* Notification Settings */}
          <div className="settings-section">
            <div className="section-header">
              <h2>Th√¥ng b√°o</h2>
              <span className="section-icon">üîî</span>
            </div>
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <h3>T·ª´ v·ª±ng m·ªõi</h3>
                  <p>Nh·∫≠n th√¥ng b√°o khi c√≥ t·ª´ v·ª±ng m·ªõi ƒë∆∞·ª£c th√™m</p>
                </div>
                <label className="toggle">
                  <input 
                    type="checkbox" 
                    checked={notifications.vocabulary}
                    onChange={() => handleNotificationChange('vocabulary')}
                  />
                  <span className="slider"></span>
                </label>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <h3>Nh·∫Øc nh·ªü h√†ng ng√†y</h3>
                  <p>Nh·∫≠n th√¥ng b√°o nh·∫Øc nh·ªü h·ªçc t·∫≠p m·ªói ng√†y</p>
                </div>
                <label className="toggle">
                  <input 
                    type="checkbox" 
                    checked={notifications.dailyReminder}
                    onChange={() => handleNotificationChange('dailyReminder')}
                  />
                  <span className="slider"></span>
                </label>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <h3>Th√†nh t√≠ch</h3>
                  <p>Nh·∫≠n th√¥ng b√°o khi ƒë·∫°t ƒë∆∞·ª£c th√†nh t√≠ch m·ªõi</p>
                </div>
                <label className="toggle">
                  <input 
                    type="checkbox" 
                    checked={notifications.achievements}
                    onChange={() => handleNotificationChange('achievements')}
                  />
                  <span className="slider"></span>
                </label>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="settings-actions">
            <button className="btn btn-primary">L∆∞u c√†i ƒë·∫∑t</button>
            <button className="btn btn-secondary">Kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh</button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Settings;