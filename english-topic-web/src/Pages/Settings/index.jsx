import { useEffect, useState } from 'react';
import { useLanguage } from '../../contexts/useLanguage';
import { useTheme } from '../../contexts/useTheme';
import './Settings.scss';

const Settings = () => {
  const { toggleTheme, isDark } = useTheme();
  const { 
    language, 
    supportedLanguages, 
    availableVoices, 
    voiceSettings, 
    changeLanguage, 
    updateVoiceSettings,
    playText,
  } = useLanguage();
  const [notifications, setNotifications] = useState({
    vocabulary: true,
    dailyReminder: true,
    achievements: true
  });

  const [showMessage, setShowMessage] = useState({
    show: false,
    text: '',
    type: 'success' // 'success' or 'error'
  });

  // Load notifications t·ª´ localStorage khi component mount
  useEffect(() => {
    const savedNotifications = localStorage.getItem('notifications');
    if (savedNotifications) {
      try {
        setNotifications(JSON.parse(savedNotifications));
      } catch (error) {
        console.error('Error loading notifications from localStorage:', error);
      }
    }
  }, []);

  const handleVoiceChange = (key, value) => {
    updateVoiceSettings({
      [key]: value
    });
  };

  const handleNotificationChange = (key) => {
    setNotifications(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const testVoice = () => {
    const testText = language === 'vi' ? 'Xin ch√†o, ƒë√¢y l√† b√†i ki·ªÉm tra gi·ªçng n√≥i' : 'Hello, this is a voice test';
    playText(testText, language);
  };

  const getLanguageOptions = () => {
    return Object.entries(supportedLanguages).map(([code, info]) => ({
      value: code,
      label: `${info.flag} ${info.name}`
    }));
  };

  const getVoiceOptions = () => {
    return availableVoices[language] || [];
  };

  // Kh√¥i ph·ª•c v·ªÅ c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh
  const resetToDefaults = () => {
    try {
      // Kh√¥i ph·ª•c language v·ªÅ US English
      changeLanguage('en');
      
      // Kh√¥i ph·ª•c voice settings v·ªÅ m·∫∑c ƒë·ªãnh
      updateVoiceSettings({
        voice: 'female-en-us',
        speed: 1,
        pitch: 1,
        accent: 'american',
        volume: 0.8
      });
      
      // Kh√¥i ph·ª•c notifications v·ªÅ m·∫∑c ƒë·ªãnh
      setNotifications({
        vocabulary: true,
        dailyReminder: true,
        achievements: true
      });
      
      // Reset theme v·ªÅ light mode n·∫øu ƒëang ·ªü dark mode
      if (isDark) {
        toggleTheme();
      }
      
      // X√≥a c√°c c√†i ƒë·∫∑t ƒë√£ l∆∞u trong localStorage
      localStorage.removeItem('notifications');
      localStorage.removeItem('theme');
      
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      setShowMessage({
        show: true,
        text: '‚úÖ ƒê√£ kh√¥i ph·ª•c v·ªÅ c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh (US English)!',
        type: 'success'
      });
      
      // ·∫®n th√¥ng b√°o sau 3 gi√¢y
      setTimeout(() => {
        setShowMessage(prev => ({ ...prev, show: false }));
      }, 3000);
      
    } catch (error) {
      console.error('Error resetting settings:', error);
      setShowMessage({
        show: true,
        text: '‚ùå C√≥ l·ªói x·∫£y ra khi kh√¥i ph·ª•c c√†i ƒë·∫∑t!',
        type: 'error'
      });
      
      setTimeout(() => {
        setShowMessage(prev => ({ ...prev, show: false }));
      }, 3000);
    }
  };

  return (
    <div className="settings-page">
      {/* Message Toast */}
      {showMessage.show && (
        <div className={`message-toast ${showMessage.type}`}>
          <span className="message-text">{showMessage.text}</span>
          <button 
            className="message-close"
            onClick={() => setShowMessage(prev => ({ ...prev, show: false }))}
          >
            √ó
          </button>
        </div>
      )}
      
      <div className="settings-container">
        <div className="settings-header">
          <h1>C√†i ƒë·∫∑t</h1>
          <p>T√πy ch·ªânh tr·∫£i nghi·ªám h·ªçc t·∫≠p c·ªßa b·∫°n</p>
        </div>

        <div className="settings-content">
          {/* Theme Settings */}
          <div className="settings-section">
            <div className="section-header">
              <h2>Giao di·ªán</h2>
              <span className="section-icon">üé®</span>
            </div>
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <h3>Ch·∫ø ƒë·ªô t·ªëi</h3>
                  <p>B·∫≠t ch·∫ø ƒë·ªô t·ªëi ƒë·ªÉ b·∫£o v·ªá m·∫Øt khi h·ªçc ban ƒë√™m</p>
                </div>
                <label className="toggle" aria-label="B·∫≠t t·∫Øt ch·∫ø ƒë·ªô t·ªëi">
                  <input 
                    type="checkbox" 
                    checked={isDark}
                    onChange={toggleTheme}
                    aria-label="Ch·∫ø ƒë·ªô t·ªëi"
                  />
                  <span className="slider"></span>
                </label>
              </div>
            </div>
          </div>

          {/* Language Settings */}
          <div className="settings-section">
            <div className="section-header">
              <h2>Ng√¥n ng·ªØ</h2>
              <span className="section-icon">üåê</span>
            </div>
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <h3>Ng√¥n ng·ªØ giao di·ªán</h3>
                  <p>Ch·ªçn ng√¥n ng·ªØ hi·ªÉn th·ªã c·ªßa ·ª©ng d·ª•ng</p>
                </div>
                <select 
                  value={language}
                  onChange={(e) => changeLanguage(e.target.value)}
                  className="select-input"
                >
                  {getLanguageOptions().map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          {/* Voice Settings */}
          <div className="settings-section">
            <div className="section-header">
              <h2>Gi·ªçng n√≥i</h2>
              <span className="section-icon">üîä</span>
            </div>
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <h3>Gi·ªçng ƒë·ªçc</h3>
                  <p>Ch·ªçn gi·ªçng nam ho·∫∑c n·ªØ cho ph√°t √¢m t·ª´ v·ª±ng</p>
                </div>
                <select 
                  value={voiceSettings.voice}
                  onChange={(e) => handleVoiceChange('voice', e.target.value)}
                  className="select-input"
                >
                  {getVoiceOptions().map(voice => (
                    <option key={voice.id} value={voice.id}>
                      {voice.name}
                    </option>
                  ))}
                </select>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <h3>T·ªëc ƒë·ªô ƒë·ªçc</h3>
                  <p>ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô ph√°t √¢m t·ª´ v·ª±ng</p>
                </div>
                <div className="range-input-container">
                  <span className="range-label">Ch·∫≠m</span>
                  <input 
                    type="range"
                    min="0.5"
                    max="2"
                    step="0.1"
                    value={voiceSettings.speed}
                    onChange={(e) => handleVoiceChange('speed', parseFloat(e.target.value))}
                    className="range-input"
                  />
                  <span className="range-label">Nhanh</span>
                </div>
                <span className="range-value">{voiceSettings.speed}x</span>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <h3>ƒê·ªô cao gi·ªçng</h3>
                  <p>ƒêi·ªÅu ch·ªânh √¢m ƒëi·ªáu c·ªßa gi·ªçng ƒë·ªçc</p>
                </div>
                <div className="range-input-container">
                  <span className="range-label">Th·∫•p</span>
                  <input 
                    type="range"
                    min="0.5"
                    max="2"
                    step="0.1"
                    value={voiceSettings.pitch}
                    onChange={(e) => handleVoiceChange('pitch', parseFloat(e.target.value))}
                    className="range-input"
                  />
                  <span className="range-label">Cao</span>
                </div>
                <span className="range-value">{voiceSettings.pitch}</span>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <h3>√Çm l∆∞·ª£ng</h3>
                  <p>ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng c·ªßa gi·ªçng ƒë·ªçc</p>
                </div>
                <div className="range-input-container">
                  <span className="range-label">Nh·ªè</span>
                  <input 
                    type="range"
                    min="0"
                    max="1"
                    step="0.1"
                    value={voiceSettings.volume}
                    onChange={(e) => handleVoiceChange('volume', parseFloat(e.target.value))}
                    className="range-input"
                  />
                  <span className="range-label">L·ªõn</span>
                </div>
                <span className="range-value">{Math.round(voiceSettings.volume * 100)}%</span>
              </div>

              <div className="setting-item">
                <button onClick={testVoice} className="test-voice-btn">
                  üéµ Test gi·ªçng n√≥i
                </button>
              </div>
            </div>
          </div>

          {/* Notification Settings */}
          <div className="settings-section">
            <div className="section-header">
              <h2>Th√¥ng b√°o</h2>
              <span className="section-icon">üîî</span>
            </div>
            <div className="settings-group">
              <div className="setting-item">
                <div className="setting-info">
                  <h3>T·ª´ v·ª±ng m·ªõi</h3>
                  <p>Nh·∫≠n th√¥ng b√°o khi c√≥ t·ª´ v·ª±ng m·ªõi ƒë∆∞·ª£c th√™m</p>
                </div>
                <label className="toggle" aria-label="B·∫≠t t·∫Øt th√¥ng b√°o t·ª´ v·ª±ng m·ªõi">
                  <input 
                    type="checkbox" 
                    checked={notifications.vocabulary}
                    onChange={() => handleNotificationChange('vocabulary')}
                    aria-label="Th√¥ng b√°o t·ª´ v·ª±ng m·ªõi"
                  />
                  <span className="slider"></span>
                </label>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <h3>Nh·∫Øc nh·ªü h√†ng ng√†y</h3>
                  <p>Nh·∫≠n th√¥ng b√°o nh·∫Øc nh·ªü h·ªçc t·∫≠p m·ªói ng√†y</p>
                </div>
                <label className="toggle" aria-label="B·∫≠t t·∫Øt nh·∫Øc nh·ªü h√†ng ng√†y">
                  <input 
                    type="checkbox" 
                    checked={notifications.dailyReminder}
                    onChange={() => handleNotificationChange('dailyReminder')}
                    aria-label="Nh·∫Øc nh·ªü h√†ng ng√†y"
                  />
                  <span className="slider"></span>
                </label>
              </div>

              <div className="setting-item">
                <div className="setting-info">
                  <h3>Th√†nh t√≠ch</h3>
                  <p>Nh·∫≠n th√¥ng b√°o khi ƒë·∫°t ƒë∆∞·ª£c th√†nh t√≠ch m·ªõi</p>
                </div>
                <label className="toggle" aria-label="B·∫≠t t·∫Øt th√¥ng b√°o th√†nh t√≠ch">
                  <input 
                    type="checkbox" 
                    checked={notifications.achievements}
                    onChange={() => handleNotificationChange('achievements')}
                    aria-label="Th√¥ng b√°o th√†nh t√≠ch"
                  />
                  <span className="slider"></span>
                </label>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="settings-actions">
            <button 
              className="btn btn-warning" 
              onClick={resetToDefaults}
              title="Kh√¥i ph·ª•c t·∫•t c·∫£ c√†i ƒë·∫∑t v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh"
            >
              üîÑ Kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Settings;