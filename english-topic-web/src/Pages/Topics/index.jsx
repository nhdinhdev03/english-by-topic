import { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import './Topics.scss';

const Topics = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [topics, setTopics] = useState([]);

  // Real topics based on available JSON files
  useEffect(() => {
    const topicsData = [
      { 
        id: 'daily-activities', 
        name: 'Ho·∫°t ƒë·ªông h√†ng ng√†y', 
        category: 'life', 
        wordCount: 120, 
        progress: 0, 
        color: '#3b82f6',
        description: 'C√°c ho·∫°t ƒë·ªông th∆∞·ªùng ng√†y'
      },
      { 
        id: 'food', 
        name: 'Th·ª©c ƒÉn', 
        category: 'life', 
        wordCount: 180, 
        progress: 0, 
        color: '#10b981',
        description: 'ƒê·ªì ƒÉn v√† ƒë·ªì u·ªëng'
      },
      { 
        id: 'travel', 
        name: 'Du l·ªãch', 
        category: 'life', 
        wordCount: 150, 
        progress: 0, 
        color: '#f59e0b',
        description: 'T·ª´ v·ª±ng v·ªÅ du l·ªãch'
      },
      { 
        id: 'animals', 
        name: 'ƒê·ªông v·∫≠t', 
        category: 'nature', 
        wordCount: 100, 
        progress: 0, 
        color: '#8b5cf6',
        description: 'C√°c lo√†i ƒë·ªông v·∫≠t'
      },
      { 
        id: 'colors', 
        name: 'M√†u s·∫Øc', 
        category: 'basic', 
        wordCount: 50, 
        progress: 0, 
        color: '#06b6d4',
        description: 'T√™n c√°c m√†u s·∫Øc'
      },
      { 
        id: 'family', 
        name: 'Gia ƒë√¨nh', 
        category: 'life', 
        wordCount: 80, 
        progress: 0, 
        color: '#ef4444',
        description: 'Th√†nh vi√™n gia ƒë√¨nh'
      },
      { 
        id: 'health', 
        name: 'S·ª©c kh·ªèe', 
        category: 'life', 
        wordCount: 140, 
        progress: 0, 
        color: '#f97316',
        description: 'Y t·∫ø v√† s·ª©c kh·ªèe'
      },
      { 
        id: 'work', 
        name: 'C√¥ng vi·ªác', 
        category: 'work', 
        wordCount: 200, 
        progress: 0, 
        color: '#84cc16',
        description: 'Ngh·ªÅ nghi·ªáp v√† c√¥ng vi·ªác'
      },
      { 
        id: 'count', 
        name: 'S·ªë ƒë·∫øm', 
        category: 'basic', 
        wordCount: 95, 
        progress: 0, 
        color: '#ec4899',
        description: 'S·ªë v√† to√°n h·ªçc'
      },
      { 
        id: 'clothes', 
        name: 'Qu·∫ßn √°o', 
        category: 'life', 
        wordCount: 90, 
        progress: 0, 
        color: '#6366f1',
        description: 'Trang ph·ª•c v√† ph·ª• ki·ªán'
      },
      { 
        id: 'weather', 
        name: 'Th·ªùi ti·∫øt', 
        category: 'nature', 
        wordCount: 60, 
        progress: 0, 
        color: '#14b8a6',
        description: 'Hi·ªán t∆∞·ª£ng th·ªùi ti·∫øt'
      },
      { 
        id: 'school', 
        name: 'Tr∆∞·ªùng h·ªçc', 
        category: 'education', 
        wordCount: 130, 
        progress: 0, 
        color: '#f59e0b',
        description: 'Gi√°o d·ª•c v√† h·ªçc t·∫≠p'
      },
      { 
        id: 'shopping', 
        name: 'Mua s·∫Øm', 
        category: 'life', 
        wordCount: 110, 
        progress: 0, 
        color: '#8b5cf6',
        description: 'Mua b√°n v√† c·ª≠a h√†ng'
      },
      { 
        id: 'environment', 
        name: 'M√¥i tr∆∞·ªùng', 
        category: 'nature', 
        wordCount: 85, 
        progress: 0, 
        color: '#10b981',
        description: 'B·∫£o v·ªá m√¥i tr∆∞·ªùng'
      },
      { 
        id: 'sport', 
        name: 'Th·ªÉ thao', 
        category: 'activity', 
        wordCount: 120, 
        progress: 0, 
        color: '#ef4444',
        description: 'C√°c m√¥n th·ªÉ thao'
      }
    ];
    setTopics(topicsData);
  }, []);

  const categories = [
    { id: 'all', name: 'T·∫•t c·∫£', count: topics.length },
    { id: 'life', name: 'ƒê·ªùi s·ªëng', count: topics.filter(t => t.category === 'life').length },
    { id: 'work', name: 'C√¥ng vi·ªác', count: topics.filter(t => t.category === 'work').length },
    { id: 'nature', name: 'T·ª± nhi√™n', count: topics.filter(t => t.category === 'nature').length },
    { id: 'basic', name: 'C∆° b·∫£n', count: topics.filter(t => t.category === 'basic').length },
    { id: 'education', name: 'Gi√°o d·ª•c', count: topics.filter(t => t.category === 'education').length },
    { id: 'activity', name: 'Ho·∫°t ƒë·ªông', count: topics.filter(t => t.category === 'activity').length },
  ];

  const filteredTopics = topics.filter(topic => {
    const matchesSearch = topic.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === 'all' || topic.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="topics-page">
      <div className="container">
        {/* Header Section */}
        <div className="topics-header">
          <h1 className="heading-1">Ch·ªß ƒë·ªÅ t·ª´ v·ª±ng</h1>
          <p className="topics-subtitle">
            Kh√°m ph√° v√† h·ªçc t·ª´ v·ª±ng theo c√°c ch·ªß ƒë·ªÅ ƒëa d·∫°ng, t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao
          </p>
        </div>

        {/* Search and Filter Section */}
        <div className="topics-controls">
          <div className="search-box">
            <input
              type="text"
              placeholder="T√¨m ki·∫øm ch·ªß ƒë·ªÅ..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="form-input"
            />
          </div>

          <div className="category-filters">
            {categories.map(category => (
              <button
                key={category.id}
                className={`category-btn ${selectedCategory === category.id ? 'active' : ''}`}
                onClick={() => setSelectedCategory(category.id)}
              >
                {category.name}
                <span className="badge">{category.count}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Topics Grid */}
        <div className="topics-grid grid grid-3">
          {filteredTopics.map(topic => (
            <Link
              key={topic.id}
              to={`/learn/${topic.id}`}
              className="topic-card card card-interactive"
            >
              <div className="topic-header">
                <div 
                  className="topic-icon"
                  style={{ backgroundColor: topic.color }}
                >
                  üìö
                </div>
                <div className="topic-meta">
                  <h3>{topic.name}</h3>
                  <p>{topic.wordCount} t·ª´ v·ª±ng</p>
                  <small>{topic.description}</small>
                </div>
              </div>

              <div className="topic-progress">
                <div className="progress-info">
                  <span>Ti·∫øn ƒë·ªô</span>
                  <span>{topic.progress}%</span>
                </div>
                <div className="progress-bar">
                  <div 
                    className="progress-fill"
                    style={{ 
                      width: `${topic.progress}%`,
                      backgroundColor: topic.color 
                    }}
                  ></div>
                </div>
              </div>

              <div className="topic-actions">
                <span className="learn-btn">H·ªçc ngay</span>
              </div>
            </Link>
          ))}
        </div>

        {/* Empty State */}
        {filteredTopics.length === 0 && (
          <div className="empty-state">
            <div className="empty-icon">üîç</div>
            <h3>Kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ n√†o</h3>
            <p>Th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm ho·∫∑c b·ªô l·ªçc</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Topics;