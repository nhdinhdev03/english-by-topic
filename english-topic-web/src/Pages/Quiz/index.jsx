import React, { useState, useEffect, useCallback, useMemo } from 'react';
import './Quiz.scss';

const Quiz = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [timeLeft, setTimeLeft] = useState(30);
  const [quizStarted, setQuizStarted] = useState(false);

  // Mock quiz data
  const quizData = useMemo(() => [
    {
      id: 1,
      question: "What does 'Adventure' mean?",
      questionVi: "'Adventure' c√≥ nghƒ©a l√† g√¨?",
      options: [
        { id: 'a', text: 'Cu·ªôc phi√™u l∆∞u', isCorrect: true },
        { id: 'b', text: 'S·ª± an to√†n', isCorrect: false },
        { id: 'c', text: 'Ng√¥i nh√†', isCorrect: false },
        { id: 'd', text: 'Th·ª©c ƒÉn', isCorrect: false }
      ]
    },
    {
      id: 2,
      question: "Choose the correct sentence:",
      questionVi: "Ch·ªçn c√¢u ƒë√∫ng:",
      options: [
        { id: 'a', text: 'She is very beauty', isCorrect: false },
        { id: 'b', text: 'She is very beautiful', isCorrect: true },
        { id: 'c', text: 'She very beautiful', isCorrect: false },
        { id: 'd', text: 'She beautiful very', isCorrect: false }
      ]
    },
    {
      id: 3,
      question: "What is the past tense of 'go'?",
      questionVi: "Th√¨ qu√° kh·ª© c·ªßa 'go' l√† g√¨?",
      options: [
        { id: 'a', text: 'goed', isCorrect: false },
        { id: 'b', text: 'goes', isCorrect: false },
        { id: 'c', text: 'went', isCorrect: true },
        { id: 'd', text: 'going', isCorrect: false }
      ]
    },
    {
      id: 4,
      question: "Complete: 'Learning English is a _____ for me.'",
      questionVi: "Ho√†n th√†nh: 'Learning English is a _____ for me.'",
      options: [
        { id: 'a', text: 'easy', isCorrect: false },
        { id: 'b', text: 'challenge', isCorrect: true },
        { id: 'c', text: 'house', isCorrect: false },
        { id: 'd', text: 'food', isCorrect: false }
      ]
    },
    {
      id: 5,
      question: "What does 'beautiful' mean in Vietnamese?",
      questionVi: "'Beautiful' c√≥ nghƒ©a l√† g√¨ trong ti·∫øng Vi·ªát?",
      options: [
        { id: 'a', text: 'X·∫•u x√≠', isCorrect: false },
        { id: 'b', text: 'B√¨nh th∆∞·ªùng', isCorrect: false },
        { id: 'c', text: 'ƒê·∫πp', isCorrect: true },
        { id: 'd', text: 'L·ªõn', isCorrect: false }
      ]
    }
  ], []);

  const handleNextQuestion = useCallback(() => {
    if (selectedAnswer) {
      const isCorrect = quizData[currentQuestion].options.find(
        option => option.id === selectedAnswer
      )?.isCorrect;
      
      if (isCorrect) {
        setScore(score + 1);
      }
    }

    setShowResult(true);
    
    setTimeout(() => {
      if (currentQuestion + 1 < quizData.length) {
        setCurrentQuestion(currentQuestion + 1);
        setSelectedAnswer(null);
        setShowResult(false);
        setTimeLeft(30);
      } else {
        setQuizCompleted(true);
      }
    }, 2000);
  }, [selectedAnswer, currentQuestion, score, quizData]);

  // Timer effect
  useEffect(() => {
    let timer;
    if (quizStarted && !showResult && !quizCompleted && timeLeft > 0) {
      timer = setTimeout(() => {
        setTimeLeft(timeLeft - 1);
      }, 1000);
    } else if (timeLeft === 0) {
      handleNextQuestion();
    }
    return () => clearTimeout(timer);
  }, [timeLeft, quizStarted, showResult, quizCompleted, handleNextQuestion]);

  const startQuiz = () => {
    setQuizStarted(true);
    setCurrentQuestion(0);
    setScore(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setQuizCompleted(false);
    setTimeLeft(30);
  };

  const selectAnswer = (answerId) => {
    setSelectedAnswer(answerId);
  };

  const resetQuiz = () => {
    setQuizStarted(false);
    setCurrentQuestion(0);
    setScore(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setQuizCompleted(false);
    setTimeLeft(30);
  };

  const getScoreMessage = () => {
    const percentage = (score / quizData.length) * 100;
    if (percentage >= 80) return { text: 'Xu·∫•t s·∫Øc! üéâ', emoji: 'üèÜ', color: 'excellent' };
    if (percentage >= 60) return { text: 'T·ªët! üëç', emoji: 'üëè', color: 'good' };
    if (percentage >= 40) return { text: 'Kh√°! üìö', emoji: 'üìñ', color: 'fair' };
    return { text: 'C·∫ßn c·ªë g·∫Øng th√™m! üí™', emoji: 'üí™', color: 'poor' };
  };

  const getOptionClass = (option) => {
    let className = 'option-btn';
    
    if (selectedAnswer === option.id) {
      className += ' selected';
    }
    
    if (showResult) {
      if (option.isCorrect) {
        className += ' correct';
      } else if (selectedAnswer === option.id) {
        className += ' incorrect';
      }
    }
    
    return className;
  };

  if (!quizStarted) {
    return (
      <div className="quiz-page">
        <div className="quiz-container">
          <div className="quiz-intro">
            <h1>üß† Tr·∫Øc nghi·ªám t·ª´ v·ª±ng</h1>
            <p>Ki·ªÉm tra ki·∫øn th·ª©c t·ª´ v·ª±ng v·ªõi {quizData.length} c√¢u h·ªèi th√∫ v·ªã</p>
            
            <div className="quiz-info">
              <div className="info-item">
                <span className="info-icon">‚ùì</span>
                <span className="info-text">{quizData.length} c√¢u h·ªèi</span>
              </div>
              <div className="info-item">
                <span className="info-icon">‚è±Ô∏è</span>
                <span className="info-text">30 gi√¢y/c√¢u</span>
              </div>
              <div className="info-item">
                <span className="info-icon">üéØ</span>
                <span className="info-text">4 ƒë√°p √°n</span>
              </div>
            </div>
            
            <button className="start-btn" onClick={startQuiz}>
              B·∫Øt ƒë·∫ßu tr·∫Øc nghi·ªám
            </button>
          </div>
        </div>
      </div>
    );
  }

  if (quizCompleted) {
    const scoreMsg = getScoreMessage();
    return (
      <div className="quiz-page">
        <div className="quiz-container">
          <div className="quiz-result">
            <div className="result-header">
              <span className="result-emoji">{scoreMsg.emoji}</span>
              <h2>Ho√†n th√†nh!</h2>
              <p className={`result-message ${scoreMsg.color}`}>{scoreMsg.text}</p>
            </div>
            
            <div className="score-display">
              <div className="score-circle">
                <span className="score-number">{score}</span>
                <span className="score-total">/{quizData.length}</span>
              </div>
              <p className="score-percentage">
                {Math.round((score / quizData.length) * 100)}% ch√≠nh x√°c
              </p>
            </div>
            
            <div className="result-actions">
              <button className="retry-btn" onClick={resetQuiz}>
                L√†m l·∫°i
              </button>
              <button className="continue-btn" onClick={() => window.history.back()}>
                Ti·∫øp t·ª•c h·ªçc
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const currentQ = quizData[currentQuestion];
  const progress = ((currentQuestion + 1) / quizData.length) * 100;

  return (
    <div className="quiz-page">
      <div className="quiz-container">
        <div className="quiz-header">
          <div className="quiz-progress">
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <span className="progress-text">
              C√¢u {currentQuestion + 1} / {quizData.length}
            </span>
          </div>
          
          <div className="quiz-timer">
            <span className="timer-icon">‚è±Ô∏è</span>
            <span className={`timer-text ${timeLeft <= 10 ? 'warning' : ''}`}>
              {timeLeft}s
            </span>
          </div>
        </div>

        <div className="question-card">
          <div className="question-content">
            <h2 className="question-text">{currentQ.question}</h2>
            <p className="question-vi">{currentQ.questionVi}</p>
          </div>

          <div className="options-grid">
            {currentQ.options.map((option) => (
              <button
                key={option.id}
                className={getOptionClass(option)}
                onClick={() => !showResult && selectAnswer(option.id)}
                disabled={showResult}
              >
                <span className="option-letter">{option.id.toUpperCase()}</span>
                <span className="option-text">{option.text}</span>
                {showResult && option.isCorrect && (
                  <span className="option-icon">‚úì</span>
                )}
                {showResult && selectedAnswer === option.id && !option.isCorrect && (
                  <span className="option-icon">‚úó</span>
                )}
              </button>
            ))}
          </div>

          {!showResult && selectedAnswer && (
            <button className="submit-btn" onClick={handleNextQuestion}>
              {currentQuestion + 1 === quizData.length ? 'Ho√†n th√†nh' : 'C√¢u ti·∫øp theo'}
            </button>
          )}

          {showResult && (
            <div className="result-feedback">
              {selectedAnswer === currentQ.options.find(opt => opt.isCorrect)?.id ? (
                <div className="feedback correct-feedback">
                  <span className="feedback-icon">üéâ</span>
                  <span className="feedback-text">Ch√≠nh x√°c!</span>
                </div>
              ) : (
                <div className="feedback incorrect-feedback">
                  <span className="feedback-icon">üòû</span>
                  <span className="feedback-text">
                    ƒê√°p √°n ƒë√∫ng l√†: {currentQ.options.find(opt => opt.isCorrect)?.text}
                  </span>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Quiz;